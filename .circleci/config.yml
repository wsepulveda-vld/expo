version: 2.1

commands:
  install_nix:
    steps:
      - run: curl https://nixos.org/releases/nix/nix-2.1.2/install | bash -s -- --no-daemon
      - run: echo ". ~/.nix-profile/etc/profile.d/nix.sh" >> ~/.bash_profile
  setup:
    steps:
      # ssh: used in circleci checkout steps
      # direnv: used to configure environment with .envrc files
      - run: nix-env -iA nixpkgs.openssh nixpkgs.direnv
      - run: mkdir -p ~/.config/direnv
      - run: echo -e "[whitelist]\nprefix = [ \"$HOME\" ]" > ~/.config/direnv/config.toml
      - run: echo 'eval "$(direnv export bash)"' >> ~/.bash_profile
      - run: echo '--frozen-lockfile true' >> ~/.yarnrc
      - checkout
  update_submodules:
    steps:
      - run: git submodule update --init
  fetch_cocoapods_specs:
    steps:
      - run: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
  restore_yarn_cache:
    steps:
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}
  save_yarn_cache:
    steps:
      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn  # `yarn cache dir`
  restore_gradle_cache:
    steps:
      - restore_cache:
          key: jars-v0-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
  save_gradle_cache:
    steps:
      - save_cache:
          key: jars-v0-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
          paths:
            - ~/.gradle
  yarn:
    parameters:
      command:
        type: string
        default: install
      working_directory:
        type: string
    steps:
      - run:
          name: yarn << parameters.command >> (<< parameters.working_directory >>)
          working_directory: << parameters.working_directory >>
          command: for i in {1..5}; do nix run nixpkgs.yarn -c yarn << parameters.command >> && break || sleep 5; done

executors:
  # We add -l to all the shell commands to make it easier to use direnv
  android:
    working_directory: ~/expo
    docker:
      # https://hub.docker.com/r/circleci/android/tags/
      # https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/android/images
      - image: circleci/android:api-27-ndk-r17b # Should match compileSdkVersion in android/app/build.gradle
    shell: /bin/bash -leo pipefail
    resource_class: large
    environment:
      # nix installation fails if this is not set
      USER: circleci
  js:
    docker:
      - image: lnl7/nix:latest # only latest includes common utils we want
    resource_class: small
    working_directory: ~/expo
    # Symlink to the readline-enabled bash which is the default command of the container
    shell: /run/current-system/sw/bin/bash -leo pipefail
  mac:
    macos: # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: "10.0.0"
    working_directory: /Users/distiller/project
    shell: /bin/bash -leo pipefail
    environment:
      # fastlane complains if these are not set
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8

workflows:
  # JavaScript packages that make up the SDK
  sdk:
    jobs:
      - expo_sdk
      - babel_preset

  # Android and iOS clients
  client:
    jobs:
      - home
      - client_android
      - client_ios
  #     - shell_app_sim_base_ios
  #     - shell_app_ios_tests:
  #         requires:
  #           - shell_app_sim_base_ios
  #           - test_suite_publish
  #     - test_suite_publish # universe/tools/powertools
  #     - client_android_tests:
  #         requires:
  #           - test_suite_publish
  #     - shell_app_base_android_new # tarball built and uploaded from universe/server/turtle

jobs:
  expo_sdk:
    executor: js
    steps:
      - setup
      - update_submodules
      - restore_yarn_cache
      - yarn:
          working_directory: ~/expo
      - save_yarn_cache
      # Add back linting once we get ESLint or TSLint set up
      - yarn:
          command: test --maxWorkers 1
          working_directory: ~/expo/packages/expo

  babel_preset:
    executor: js
    steps:
      - setup
      - update_submodules
      - restore_yarn_cache
      - yarn:
          working_directory: ~/expo
      - save_yarn_cache
      - yarn:
          command: lint --max-warnings 0
          working_directory: ~/expo/packages/babel-preset-expo
      - yarn:
          command: jest --maxWorkers 1
          working_directory: ~/expo/packages/babel-preset-expo

  home:
    executor: js
    steps:
      - setup
      - update_submodules
      - restore_yarn_cache
      - yarn:
          working_directory: ~/expo
      - save_yarn_cache
      - yarn:
          command: jest --maxWorkers 1
          working_directory: ~/expo/home

  client_ios:
    executor: mac
    steps:
      - install_nix
      - setup
      - update_submodules
      - run: git lfs pull
      - fetch_cocoapods_specs
      - yarn:
          working_directory: ~/project/tools-public
      - run: nix run nixpkgs.nodejs-8_x nixpkgs.fastlane -c fastlane ios create_simulator_build
      - store_artifacts:
          path: ~/Library/Logs/fastlane/

  client_android:
    executor: android
    steps:
      - install_nix
      - setup
      - yarn:
          working_directory: ~/expo # need jsc-android dependency in expokit-npm-package
      - yarn:
          working_directory: ~/expo/tools-public
      - run: nix-env -f . -iA nodejs-8_x # For some reason `nix run` doesn't work
      - run: ~/expo/tools-public/generate-dynamic-macros-android.sh
      - restore_gradle_cache
      - run:
          working_directory: ~/expo/android
          command: ./gradlew :app:preBuild
      - save_gradle_cache
      - run:
          working_directory: ~/expo/android
          command: ./gradlew :app:assembleProdMinSdkProdKernelRelease
      - run: echo 'export PATH="/opt/android/sdk/build-tools/27.0.3:$PATH"' >> $BASH_ENV # should match buildToolsVersion in android/app/build.gradle
      - run: zipalign -v -p 4 android/app/build/outputs/apk/prodMinSdkProdKernel/release/app-prodMinSdk-prodKernel-release-unsigned.apk app-prod-release-unsigned-aligned.apk
      - run:
          name: Sign APK
          command: apksigner sign --ks <(echo $ANDROID_KEYSTORE_B64 | base64 -d) --ks-key-alias $ANDROID_KEY_ALIAS --ks-pass env:ANDROID_KEYSTORE_PASSWORD --key-pass env:ANDROID_KEY_PASSWORD --out exponent-release.apk app-prod-release-unsigned-aligned.apk
      - store_artifacts:
          path: ~/expo/exponent-release.apk
